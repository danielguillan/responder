// =============================================================================
// Respond-to mixin
// =============================================================================

@mixin respond-to($breakpoint) {

	$breakpoint-info: getBreakpointInfo($breakpoint);

	@if $breakpoint-info == 'error' {
		@warn '[ERROR] Invalid breakpoint parameter';
	} @else {
		$breakpoint-name: nth($breakpoint-info, 1);
		$breakpoint-extend: nth($breakpoint-info, 2);
		$breakpoint-group: nth($breakpoint-info, 3);
		$breakpoint-group-id: nth($breakpoint-info, 4);

		$min-width: 0;
		$max-width: 0;

		// If it's a regular breakpoint
		@if $breakpoint-group == false {
			$min-width: nth($breakpoint-values, index($breakpoint-names, $breakpoint-name));

			// Only set a max-width if it's not the last breakpoint
			@if (index($breakpoint-names, $breakpoint-name) + 1) <= length($breakpoint-values) {
				$max-width: nth($breakpoint-values, (index($breakpoint-names, $breakpoint-name) + 1));
			} @else {
				@if $breakpoint-extend == and-below {
					$max-width: nth($breakpoint-values, (index($breakpoint-names, $breakpoint-name)));
				} @else {
					$breakpoint-extend: and-up;
				}
			}

		// If it's a breakpoint group
		}@else {
			$min-width: nth( nth($breakpoint-groups, $breakpoint-group-id), 2);
			$max-width: nth( nth($breakpoint-groups, $breakpoint-group-id), 3);
		}

		@if $breakpoint-extend == only {
			@media (min-width: getSize($min-width)) and (max-width: getSize($max-width - 1)) { @content; }
		} @else if $breakpoint-extend == and-up {
			@media (min-width: getSize($min-width)) { @content; }
		} @else if $breakpoint-extend == and-below {
			@media (max-width: getSize($max-width - 1)) { @content; }
		}
	}
}
