// =============================================================================
// Functions
//
// Table of contents:
// 1. Get breakpoint Names list
// 2. Get breakpoint Values list
// 3. Get breakpoint Groups list with min and max values
// 4. Get the Respond-to breakpoint
//
// =============================================================================

// =============================================================================
// 1. Get breakpoint Names list
// =============================================================================

@function getBreakpointNames($breakpoints) {
	$names: ();
	@for $i from 1 through length($breakpoints) {
		@if type-of(nth(nth($breakpoints,$i),1)) == string {
			$names: join($names, nth(nth($breakpoints,$i),1));
		} @else {
			@warn '[ERROR] "' + nth(nth($breakpoints,$i),1) + '" is not a valid breakipoint name';
		}
	}
	@return $names;
}

// =============================================================================
// 2. Get breakpoint Values list
// =============================================================================

@function getBreakpointValues($breakpoints) {
	$values: ();
	@for $i from 1 through length($breakpoints) {
		@if type-of(nth(nth($breakpoints,$i),2)) == number {
			$values: join($values, nth(nth($breakpoints,$i),2));
		} @else {
			@warn '[ERROR] "' + nth(nth($breakpoints,$i),2) + '" is not a valid breakipoint value';
		}
	}
	@return $values;
}

// =============================================================================
// 3. Get breakpoint Groups list with min and max values
// =============================================================================

@function createBreakpointGroups($breakpoint-names, $breakpoint-values) {
	$groups: ();
	$total-groups: 0;
	$last: 0;

	@for $i from 1 through length($breakpoint-names) {
		$group: regex(nth($breakpoint-names,$i), '([a-z]+)?\-');
		$repeated: false;

		@if $group != '' {

			// Check if we already found this group
			@each $saved-group in $groups {
				@if $group == nth($saved-group, 1) {
					$repeated: true;
				}
			}

			// If this is a new group add it to the list
			@if $repeated != true {
				$group: join($group, nth($breakpoint-values, $i) nth($breakpoint-values, ($i + 2)), space);
				$groups: append($groups, $group , comma );
				$total-groups: $total-groups + 1;
			}
		}
	}

	@return $groups;
}

// =============================================================================
// 4. Get the Respond-to breakpoint
// =============================================================================

@function getBreakpointInfo($breakpoint) {

	// capture the extend (only, and-up or and-below)
	$extend: regex($breakpoint, '((and-)?[a-z]+)$');

	// capture the breakpoint name
	$root: regex($breakpoint, '(.*?)-'+ $extend + '$');

	// Check if it's a normal breakpoint
	@for $i from 1 through length($breakpoint-names) {

		@if $root == nth($breakpoint-names, $i) {
			$group: false;
			$groupid: false;
			$br: join($root, $extend, space);
			$br: join($br, $group, space);
			$br: join($br, $groupid, space);
			@return $br;
		}
	}

	// Check if it's a group
	@for $i from 1 through length($breakpoint-groups) {
		@if $root == nth(nth($breakpoint-groups, $i),1) {
			$group: true;
			$groupid: $i;
			$br: join($root, $extend, space);
			$br: join($br, $group, space);
			$br: join($br, $groupid, space);
			@return $br;
		}
	}

	@warn '[ERROR] "' + $breakpoint + '"" is not a valid parameter. Please, check the breakpoint name and also make sure you used -only, -and-up, or -and-below]';
	@return 'error';
}